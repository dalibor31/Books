{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\froman\fcharset0 Times New Roman;}{\f1\fswiss\fcharset0 Courier New;}{\f2\fswiss\fcharset0 Arial;}{\f3\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\keepn\sb100\sa100\kerning36\b\f0\fs48{\field{\*\fldinst{HYPERLINK "http://www.epanorama.net/documents/pc/mouse.html?the_id=23" \\\\l ""}}{\fldrslt{\cf1\ul PC mouse}}}\cf0\ulnone\f0\fs48  information\par
\pard\sb100\sa100\kerning0\b0\fs24 This documents tries to tell how PC mouse hardware works and how to read it at the lowest level. If you are programming under some ready made operating systems, then it would be better to use the routines supplied by the mouse driver (a good description of DOS mouse driver programming is available at ftp://x2ftp.oulu.fi/pub/msdos/programming/docs/gmouse.doc in ascii format). There is also a good tutorial {\field{\*\fldinst{HYPERLINK "http://www.geocities.com/SiliconValley/2151/mouse.html"}}{\fldrslt{\cf1\ul Programming the Microsoft Mouse}}}\cf0\ulnone\f0\fs24  in the {\field{\*\fldinst{HYPERLINK "http://www.geocities.com/SiliconValley/2151/pcgpe.html"}}{\fldrslt{\cf1\ul PC Game Programmer's Encyclopedia}}}\cf0\ulnone\f0\fs24 . \par
\pard\keepn\sb100\sa100\b\fs36 How mouse system works\par
\pard\sb100\sa100\b0\fs24 Typical PC mouse controlling system has the following parts: \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20 sensors -> mouse controller -> communication link -> data interface -> driver -> software\par
\pard\sb100\sa100\f0\fs24 Sensors are the movement detectors (typically optomechanical) which sense the {\field{\*\fldinst{HYPERLINK "http://www.epanorama.net/documents/pc/mouse.html?the_id=23" \\\\l ""}}{\fldrslt{\cf1\ul mouse movement}}}\cf0\ulnone\f0\fs24  and button swiches which sense the button states. Mouse controller reads the state of those sensors and takes acount of current mouse position. When this information changes the mouse controller sends a packet of data to the computer data interface controller. \par
The mouse driver in the computer received that data packet and decodes the information from it and does actions based on the information. Typically mouse driver has the information of the current mouse state (position and button states) and tells them to the application or operating when it asks them. Typically the mouse drive calls {\field{\*\fldinst{HYPERLINK "http://www.epanorama.net/documents/pc/mouse.html?the_id=23" \\\\l ""}}{\fldrslt{\cf1\ul mouse cursor}}}\cf0\ulnone\f0\fs24  moving routines when mouse is moved and sends messages to the software when buttons are pressed. \par
In typical modern PC mouse driver the actual {\field{\*\fldinst{HYPERLINK "http://www.epanorama.net/documents/pc/mouse.html?the_id=23" \\\\l ""}}{\fldrslt{\cf1\ul cursor}}}\cf0\ulnone\f0\fs24  movement is not linearly related to the mouse movement. This might sound a bit strange but it has been found that there are better ways to change the mouse movement to cursor muvement than just simply causing one mouse step to move the cursor one pixel. During the pioneering research done at {\field{\*\fldinst{HYPERLINK "http://www.apple.com/"}}{\fldrslt{\cf1\ul Apple Computer}}}\cf0\ulnone\f0\fs24  in the devellopment of the graphical user interface (GUI), it became apparent that no particular ratio between mouse movement and cursor movement was best suited for all tasks. \par
Early work detected that there are two basic movements in the use of pointing devices: move cursor to desired area and then exactly to desired target. Those two movements have contradictory requirements, so Apple solved the problem by monitoring the mouse movements and change it's CPI (counts per inch) characteristics. When the mouse was moved slowly it remained 100 CPI and when the mouse was moved fast it appears to be 400 CPI mouse. This method of adjusting CPI based on its usage has now been adopted by the default driver in Windows 95 and is now the most commonly accepted way of translating mouse movements to cursor screen movement \par
\par
\pard\keepn\sb100\sa100\kerning36\b\fs48 Mouse hardware information\par
\kerning0\fs36 Serial mouse\par
\fs28 Voltage levels:\par
\pard\sb100\sa100\b0\fs24 Mouse takes standard RS-232C output signals (+-12V) as its input signals. Those outputs are in +12V when mouse is operated. Mouse takes some current from each of the RS-232C port output lines it is connected (about 10mA). Mouse send data to computer in levels that RS-232C receiver chip in the computer can uderstand as RS-232C input levels. Mouse outputs are normally something like +-5V, 0..5V or sometimes +-12V. Mouse electronics normally use +5V voltage. \par
\pard\keepn\sb100\sa100\b\fs28 Hardware implementation\par
\pard\sb100\sa100\b0\fs24 PC serial mouse uses typically DRT and RTS lines for generating +5V power for microcontroller circuit in the mouse. Because typical optomechanical mouse also needs power for 4 leds in the optocoupler movevement detectors, there is not much power to loose. A typical approach is to use diodes to take current fron DTR and RTS lines and then feed it through resistor to all of the (infrared) leds in the movement detectors. All four (infrared) leds are connected in series, which gives about +5V voltage drop over all leds (typical to leds used in moused). This +5V is adequate power for low power mouse microcontroller. The serial data transimitting circuit consists of simple discrete transistor circuir to make it consume as little power as possible. The positive power supply usually taken from RTS and DRT lines (just after the diodes and before the resistor going to leds). The negative supply for transmitter is taken from TD pin. Typical PC serial port mouse takes 10 mA total current and operates at voltage range of 6-15V. The data itself in sent using standard asuncronous RS-232C serial format: \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20               Start D0  D1  D2  D3  D4  D5  D6  D7  Stop\par
   Logic 0      ___ ___ ___ ___ ___ ___ ___ ___ ___\par
  +3..+15V     |   |   |   |   |   |   |   |   |   |\par
               |   |   |   |   |   |   |   |   |   |\par
               |   |   |   |   |   |   |   |   |   |\par
   Logic 1     |   |   |   |   |   |   |   |   |   |\par
  -3..-15V  ___|   |___|___|___|___|___|___|___|___|____\par
\par
\pard\keepn\sb100\sa100\b\f0\fs28 Microsoft serial mouse\par
\pard\sb100\sa100\b0\fs24 Microsoft serial mouse is the most popular 2 button serial mouse type. Typically that cheap tho button mouse which comes with the computer is {\field{\*\fldinst{HYPERLINK "http://www.epanorama.net/documents/pc/mouse.html?the_id=23" \\\\l ""}}{\fldrslt{\cf1\ul Microsoft mouse}}}\cf0\ulnone\f0\fs24  system. Microsoft mouse is supported in all major operating systems. \par
\pard\keepn\sb100\sa100\b\fs28 Mouse resolution and tracking rate\par
\pard\sb100\sa100\b0\fs24 Maximum tracking rate for Microsoft mouse is 40 reports/second * 127 counts per report = 5080 counts per second. The most common range for typical mouses is 100 to 400 CPI (count per inch) but can be up to 1000 CPI (cheap ones typically are 100 CPI or 200 CPI models). This means that you can move 100 CPI mouse up to speed of 50.8 inches per second and 400 CPI mouse maximally at 12.7 inches per second. The actual accuracy of movement the software sees is detemined by the settings of the mouse driver (many mouse drivers have option to adjust mouse sensitivity). \par
\pard\keepn\sb100\sa100\b\fs28 Pinout\par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\b0\f1\fs20 9 pin    25 pin     Wire Name            Comments\par
shell     1         Protective Ground\par
3         2         TD                  Serial data from host to mouse (only for power)\par
2         3         RD                  Serial data from mouse to host\par
7         4         RTS                 Positive voltage to mouse\par
8         5         CTS\par
6         6         DSR\par
5         7         Signal Ground\par
4         20        DTR                 Positive voltage to mouse and reset/detection\par
\par
RTS = Request to Send   CTS = Clear to Send\par
DSR = Data Set Ready    DTR = Data Terminal Ready\par
\pard\sb100\sa100\f0\fs24 To function correctly, both the RTS and DTR lines must be positive. The lines DTR-DSR and RTS-CTS must NOT be shorted. Implement the RTS toggle function by setting the RTS line negative and positive again. The negative pulse width is at least 100ms. After a cold boot, the RTS line is usually set to a negative level. In this case, setting the RTS line to a positive level is also considered an RTS toggle. \par
\pard\keepn\sb100\sa100\b\fs28 Serial data parameters:\par
\pard\sb100\sa100\b0\fs24 1200bps, 7 databits, 1 stop-bit\par
\pard\keepn\sb100\sa100\b\fs28 Data packet format:\par
\pard\sb100\sa100\b0\fs24 Data packet is 3 byte packet. It is send to the computer every time mouse state changes (mouse moves or keys are pressed/released). \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20         D7      D6      D5      D4      D3      D2      D1      D0\par
 \par
1.      X       1       LB      RB      Y7      Y6      X7      X6\par
2.      X       0       X5      X4      X3      X2      X1      X0      \par
3.      X       0       Y5      Y4      Y3      Y2      Y1      Y0\par
\pard\sb100\sa100\f0\fs24 Note: The bit marked with X is 0 if the mouse received with 7 databits and 2 stop bits format. It is also possible to use 8 databits and 1 stop bit format for receiving. In this case X gets value 1. The safest thing to get everything working is to use 7 databits and 1 stopbit when receiving mouse information (and if you are making mouse then send out 7 databits and 2 stop bits). \par
The byte marked with 1. is send first, then the others. The bit D6 in the first byte is used for syncronizing the software to mouse packets if it goes out of sync. \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20 LB is the state of the left button (1 means pressed down)\par
RB is the state of the right button (1 means pressed down)\par
X7-X0 movement in X direction since last packet (signed byte)\par
Y7-Y0 movement in Y direction since last packet (signed byte)\par
\pard\keepn\sb100\sa100\b\f0\fs28 Graphical description how the data is contained in the packet\par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\b0\f1\fs20               1st byte        2nd byte         3rd byte\par
          ================  ===============  ================\par
           - 1 ? ? Y Y X X  - 0 X X X X X X  - 0 Y Y Y Y Y Y\par
          ================  ===============  ================\par
               | | \\ / \\ /      \\---------/      \\---------/\par
               | |  |   |            |                |\par
               | |  |   \\----\\       |                |\par
               | |  \\--------|-------|--------\\       |\par
               | |          / \\ /---------\\  / \\ /---------\\\par
               | |         ================ =================\par
               | |          0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0\par
 Left Button --/ |         ================ =================\par
Right Button ----/            X increment      Y increment\par
\pard\keepn\sb100\sa100\b\f0\fs28 Mouse identification\par
\pard\sb100\sa100\b0\fs24 When DTR line is toggled, mouse should send one data byte containing letter 'M' (ascii 77). \par
\pard\keepn\sb100\sa100\b\fs28{\field{\*\fldinst{HYPERLINK "http://www.epanorama.net/documents/pc/mouse.html?the_id=23" \\\\l ""}}{\fldrslt{\cf1\ul Logitech}}}\cf0\ulnone\f0\fs28  extension to protocol\par
\pard\sb100\sa100\b0\fs24 Logitech uses this same protocol in their mouses (for example Logitech Pilot mouse and others). The origianal protocol supports only two buttons, but logitech as added third button to some of their mouse models. To make this possible logitech has made one extension to the protocol. \par
I have not seen any documentation about the exact documents, but here is what I have found out: The information of the third button state is sent using one extra byte which is send after the normal packet when needed. Value 32 (dec) is sent every time when the center button is pressed down. It is also sent every time with the data packet when center button is kept down and the mouse data packet is sent for other reasons. When center button is released, the mouse sends the normal data packet followed by data bythe which has value 0 (dec). As you can see the extra data byte is sent only when you mess with the center button. \par
\pard\keepn\sb100\sa100\b\fs28 Mouse systems mouse\par
Serial data parameters:\par
\pard\sb100\sa100\b0\fs24 1200bps, 8 databits, 1 stop-bit\par
\pard\keepn\sb100\sa100\b\fs28 The data is sent in 5 byte packets in following format:\par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\b0\f1\fs20         D7      D6      D5      D4      D3      D2      D1      D0\par
\par
1.      1       0       0       0       0       LB      CB      RB\par
2.      X7      X6      X5      X4      X3      X2      X1      X0\par
3.      Y7      Y6      Y5      Y4      Y3      Y4      Y1      Y0\par
4.      X7'     X6'     X5'     X4'     X3'     X2'     X1'     X0'\par
5.      Y7'     Y6'     Y5'     Y4'     Y3'     Y4'     Y1'     Y0'\par
\par
LB is left button state (0=pressed, 1=released)\par
CB is center button state (0=pressed, 1=released)\par
RB is right button state (0=pressed, 1=released)\par
X7-X0 movement in X direction since last packet in signed byte \par
      format (-128..+127), positive direction right\par
Y7-Y0 movement in Y direction since last packet in signed byte \par
      format (-128..+127), positive direction up\par
X7'-X0' movement in X direction since sending of X7-X0 packet in signed byte \par
      format (-128..+127), positive direction right\par
Y7'-Y0' movement in Y direction since sending of Y7-Y0 in signed byte \par
      format (-128..+127), positive direction up\par
\pard\sb100\sa100\f0\fs24 The last two bytes in the packet (bytes 4 and 5) contains information about movement data changes which have occured after data butes 2 and 3 have been sent. \par
\par
\pard\keepn\sb100\sa100\b\fs36 Bus mouse\par
\pard\sb100\sa100\b0\fs24 Bus mouse is connected to the PC using a mouse card put to ISA bus. The card has the intelligence in it and the mouse has only the detectors for mouse movement and mosue button switches. The mouse is connected to card using 9 pin Hosiden connector. \par
\pard\keepn\sb100\sa100\b\fs28 Connector pinout\par
\pard\sb100\sa100\b0\fs24 (the pin umbering might be wrong in this) \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20         1 2 3\par
\par
       4 5 6 7\par
\par
         8 9\par
\par
\par
1.      SW2\par
2.      SW3\par
3.      Signal Ground\par
4.      XB\par
5.      YA\par
6.      YB\par
7.      SW1\par
8.      +5V\par
9.      XA\par
\pard\sb100\sa100\f0\fs24 SW1, SW2 and SW3 are signals from mouse buttons.\line XA, XB, YA and YB are quadriture signals from mouse movement detectors.\par
\pard\keepn\sb100\sa100\b\fs28 Another connector numbering scheme\par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\b0\f1\fs20\par
         7 8 9\par
\par
        3 4 5 6\par
\par
          1 2\par
\par
 1.      +5v\par
 2.      XA  (H-Pulse)\par
 3.      XB  (HQ-Pulse)\par
 4.      YA  (V-Pulse)\par
 5.      YB  (VQ-Pulse)\par
 6.      SW1 (Left)\par
 7.      SW2 (Middle)\par
 8.      SW3 (Right)\par
 9.      GND\par
 SW1, SW2 and SW3 are signals from mouse buttons.XA, XB, YA and YB are\par
 quadriture signals from mouse movement detectors.\par
\pard\keepn\sb100\sa100\b\f0\fs28 Wiring according logitech documentation\par
\pard\sb100\sa100\b0\fs24 Pinout: \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20          7 8 9\par
\par
        3 4 5 6\par
\par
          1 2\par
\pard\sb100\sa100\f0\fs24 Pin functions: \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20 Wire     Mini-DIN       Logitech             Microsoft\par
Color      Pin       P-Series Signal       InPort Signal\par
Black       1             +5V                  +5V\par
Brown       2              X2                   XA\par
Red         3              X1                   XB\par
Orange      4              Y1                   YA\par
Yellow      5              Y2                   YB\par
Green       6              Left                 SW1\par
Violet      7              Middle               SW2\par
Gray        8              Right                SW3\par
White       9              GND                  Logic GND\par
SHIELD    shell            chassis              chassis\par
\pard\sb100\sa100\f0\fs24\par
\pard\keepn\sb100\sa100\b\fs36 PS/2 mouse\par
\pard\sb100\sa100\b0\fs24 PS/2 mouse is connected to computer motherboard using same type of 6 pin connector as PS/2 keyboard. The data is sent using syncronous serial protocol similar to protocol used by PS/2 keyboard. The mouse data is handled using keyboard controller. PS/2 type mouse is becoming more and more common because many new computers (nearly all big brands and new no brand computers made using ATX standard motherboards) have PS/2 mouse port integrated it in it and using PS/2 mouse connected to that port also frees one serial port for other uses. \par
\pard\keepn\sb100\sa100\b\fs28 Mouse resolution and tracking rate\par
\pard\sb100\sa100\b0\fs24 The standard PS/2 mouse (with Logitech mouse) defaults to 160 CPI and can be switched to 40, 80, 160 or 320 CPI with software. Microsoft mouse driver for Windows 3.x and Windows 95 defauls to 160 couns per inch. The maximum tracking rate for PS/2 mouse is 40 report/second * 255 counts per report = 10200 counts per second. For 100 CPI mouse this would indicate maximum trackign rate of 102 inches per second and for 400 CPI mouse only 25.2 inches per second. \par
\pard\keepn\sb100\sa100\b\fs28 Connector pinout\par
\pard\sb100\sa100\b0\fs24 Pin Wire Name 1 DATA 2 Reserved 3 Ground 4 +5V Supply 5 CLK 6 Reserved Shield Chassis \par
\pard\keepn\sb100\sa100\b\fs28 Data packet format\par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\b0\f1\fs20         D7      D6      D5      D4      D3      D2      D1      D0\par
1.      XV      XV      YS      XS      1       0       R       L\par
2.      X7      X6      X5      X4      X3      X2      X1      X0\par
3.      Y7      Y6      Y5      Y4      Y3      Y2      Y1      Y0\par
\par
L       Left button state (1 = pressed down)\par
R       Right button state (1 = pressed down)\par
X0-X7   Movement in X direction\par
Y0-Y7   Movement in Y direction\par
XS,YS   Movement data sign bits (1 = negative)\par
XV,YV   Movement data overflow bits (1 = overflow has occured)\par
\pard\keepn\sb100\sa100\b\f0\fs28 Physical connector\par
\pard\sb100\sa100\b0\fs24 The PS/2 mouse connector has the following pinout when looking at the connector on the back of the computer: \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20 6 Pin PS2\par
\par
1   DATA\par
2   No connection\par
3   GND\par
4   +5V\par
5   CLK\par
6   No connection\par
\par
The PS2 is numbered as follows:\par
        \par
      6   5\par
     4     3\par
       2 1\par
\pard\sb100\sa100\f0\fs24 Bi-directional transmission is controlled by the CLK and DATA lines. Both are fed by an open collector device which lets either host or mouse force the line to "0". During non-transmission, CLK is at "1" and DATA can be at "0" or "1". \par
The host can inhibit mouse transmission by forcing CLK to "0". If the host inhibits the mouse while it is transmitting, the byte must be retransmitted (if the inhibit state arrived before the 11th clock). \par
There is a simple description in my old IBM PS/2 model 50/60 technical reference. The mouse interface is the same as the keyboard interface. The Intel 8042 supports two channels, one for keyboard and one for the auxiliary device (mouse, trackball, touchpad). Pin 1 is the data, pin3 ground, pin 4 +5V and pin 5 clock. \par
Receiving data: Check 'clock'. If inactive, there is a bit on the 'data' line. Each transmission unit is one start bit, eight data bits, odd parity and one stop bit. Start bits are low, stop bits high. Each clock active or inactive period is 30 to 50 microseconds. Data transition to falling edge of clock is 5 to 25 microseconds. \par
Sending: Check that both clock and data are high. Pull down data for start bit, and start clocking. \par
NOTE: Logitech has made their own extension also to this protocol to allow three buttons. \par
\par
\pard\keepn\sb100\sa100\b\fs36 Mouse movement detectors\par
\pard\sb100\sa100\b0\fs24 The most tyical construction of mouse movement detectors are optomechanical detectors. The system works so that X and Y movement of the mouse rotates slotted disks. The movement info is then picked from those slotted disks using optical sensors. There are two sensors for each slotted disk and those sensors give out two singals which are 90 degreed out of phase compared to each other. \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20\par
sensor #0 ----    ----    ----    ----   light\par
              ----    ----    ----       no light\par
\par
sensor #1   ----    ----    ----    --   light\par
          --    ----    ----    ----    no light\par
\pard\sb100\sa100\f0\fs24 So if we call the getting light phase '1', and the not getting light phase (when the light is blocked by the wheel) '0' then it looks like this: \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20 sensor #0 - 1111000011110000111100001111\par
sensor #1 - 0011110000111100001111000011\par
            ^^^^^^^^\par
            full cycle of pulses\par
\pard\sb100\sa100\f0\fs24 This can be decoded into four discrete bit pairs for the two sensors: \par
\pard\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\f1\fs20          Forward direction     Backwards direction\par
            0 1 2 3                3 2 1 0\par
sensor #0 - 1 1 0 0                0 0 1 1\par
sensor #1 - 0 1 1 0                0 1 1 0\par
\pard\sb100\sa100\f0\fs24 This information can be easily decoded usign small microcontroller and then sent to computer in correct format. \par
\pard\keepn\sb100\sa100\b\fs36 Information sources\par
\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent360{\pntxtb\'B7}}\fi-360\li720\sb100\sa100\b0\fs24 PC Magazine May 28, 1991 \par
{\pntext\f3\'B7\tab}Various articles form usenet news (the information later verified with measurement or other sources) \par
{\field{\*\fldinst{HYPERLINK "{\pntext\f3\'B7\tab}ftp://x2ftp.oulu.fi/pub/msdos/programming/docs/gmouse.doc"}}{\fldrslt{\cf1\ul Programmer's Reference to Genius Mouse}}}\cf0\ulnone\f0\fs24  \par
{\pntext\f3\'B7\tab}My own experimenting with Genius Mouse GM6 ja Logitech Pilot Mouse \par
{\field{\*\fldinst{HYPERLINK "{\pntext\f3\'B7\tab}ftp://ftp.logitech.com/pub/TechSupport/MOUSE/HELP/1410.txt"}}{\fldrslt{\cf1\ul Logitech Pointing Device Hardware Information Product Support Document # 1410}}}\cf0\ulnone\f0\fs24  \par
{\field{\*\fldinst{HYPERLINK "{\pntext\f3\'B7\tab}http://www.4qd.co.uk/faq/meece.html"}}{\fldrslt{\cf1\ul Mice: How do they work?}}}\cf0\ulnone\f0\fs24  by {\field{\*\fldinst{HYPERLINK "mailto:4qd@argonet.co.uk"}}{\fldrslt{\cf1\ul Richard Torrens}}}\cf0\ulnone\f0\fs24  \par
{\pntext\f3\'B7\tab}In Pursuit Of The Perfect Portable Pointer by Intelink Electronics from EDN Products Edition April 16, 1977 pages 43-45 \par
\pard\f2\fs20\par
}
 